
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.4     ✔ dplyr   1.0.2
✔ tidyr   1.1.2     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(ACEBounds)
> library(distributions3)

Attaching package: ‘distributions3’

The following objects are masked from ‘package:stats’:

    Gamma, quantile

The following object is masked from ‘package:grDevices’:

    pdf

> library(furrr)
Loading required package: future
> 
> set.seed(8072659)
> 
> sample_size <- 1e6
> SIM_AND_SAVE <- FALSE
> PLOT <- TRUE
> 
> ATE_from_simulated_data <- function(from_simulate_data) {
+   intercept <- filter(from_simulate_data$coefficients, effect == "Yintercept")$coef
+   x_beta <- filter(from_simulate_data$coefficients, effect == "X_on_Y")$coef
+   u_beta <- filter(from_simulate_data$coefficients, effect == "U_on_Y")$coef
+ 
+   pY1X0 <- 1 / (1 + exp(-intercept - u_beta * from_simulate_data$simulated_data$U))
+   pY1X1 <- 1 / (1 + exp(-intercept - x_beta - u_beta * from_simulate_data$simulated_data$U))
+ 
+   return(mean(pY1X1 - pY1X0))
+ }
> 
> if (SIM_AND_SAVE) {
+ 
+   plan(multicore, workers = 3)
+ 
+   all_indIVs_on_X <- expand_grid(p = c(10, 50),
+                                  many_weak = c(TRUE, FALSE),
+                                  scenario = c("MR", "power")) %>%
+     rowwise() %>%
+     mutate(
+       indIVs_on_X = case_when(many_weak & scenario == "MR" ~ list(c(runif(p-1, 0, 0.01), 0.5)),
+                               many_weak & scenario == "power" ~ list(c(runif(p-1, 1, 1.2), 4)),
+                               !many_weak & scenario == "MR" ~ list(runif(p, 0, 0.01)),
+                               !many_weak & scenario == "power" ~ list(runif(p, 1, 4)),
+                               TRUE ~ list(NA))
+     ) %>%
+     ungroup()
+ 
+   all_combinations <- expand_grid(
+     p = c(10, 50),
+     many_weak = c(TRUE, FALSE),
+     scenario = c("MR", "power"),
+     X_on_Y = c(0.25, 0.5, 1, 1.5, 2),
+     U_on_XY = c(0.1, 0.5)
+   ) %>%
+     left_join(all_indIVs_on_X)
+ 
+   for (i in 1:nrow(all_combinations)) {
+ 
+     cat(i, "of", nrow(all_combinations), "\n")
+ 
+     # if(all_combinations[i,]$p == 50){
+     #   plan(multicore, workers = 1)
+     # } else {
+     #   plan(multicore, 3)
+     # }
+ 
+     tmp <- all_combinations[i, ] %>%
+       mutate(
+         sim_data = future_pmap(
+           .l = list(indIVs_on_X, X_on_Y, U_on_XY),
+           function(x, y, z) {
+             simulate_data(
+               sample_size = sample_size,
+               IVs_ps = rep(list(c(0.25, 0.5, 0.25)), times = length(x)),
+               X_intercept = -sum(x),
+               Y_intercept = -y / 2,
+               indIVs_on_X = x,
+               indIVs_on_Y = 0,
+               U = distributions3::Normal(),
+               U_on_X = z,
+               U_on_Y = z,
+               X_on_Y = y
+             )
+           },
+           .options = furrr_options(seed = TRUE)
+         )
+       )
+ 
+     write_rds(
+       tmp,
+       here::here("data/multiple_IV_sims", paste0(str_pad(i, width = 2, side = "left", pad = 0), ".Rds"))
+     )
+   }
+ }
> 
> 
> if (PLOT) {
+   if (!file.exists(here::here("data/multiple_IV_sims/bounds_and_ATE.Rds"))) {
+     plan(multicore, workers = 3)
+ 
+     all_multiple_IV_sims <- list.files(here::here("data/multiple_IV_sims"), pattern = "[0-9]+.Rds", full.names = TRUE)
+ 
+     bounds_and_ATE <- tibble(data_file = all_multiple_IV_sims) %>%
+       mutate(
+         subset = map(
+           data_file,
+           function(x) {
+             tmp <- read_rds(x)
+ 
+             out <- tmp %>%
+               mutate(
+                 ATE = map_dbl(sim_data, ATE_from_simulated_data),
+                 sums_and_bounds = map(
+                   sim_data,
+                   function(x) {
+                     sums_and_bounds <- x$simulated_data %>%
+                       pivot_longer(starts_with("Z"), names_to = "IV", values_to = "z") %>%
+                       nest_by(IV) %>%
+                       ungroup() %>%
+                       mutate(
+                         sum_stats = future_map(data, ~probs_from_data(.x, X, Y, z, data_format = "bivariate")),
+                         get_bounds_res = future_map(sum_stats, ~get_bounds(gammas = .x$gammas, thetas = .x$thetas, stop = FALSE)),
+                         bounds = future_map(get_bounds_res, "interval")
+                       ) %>%
+                       select(-data)
+ 
+                     coefs <- x$coefficients %>%
+                       filter(str_sub(effect, end = 1) == "Z") %>%
+                       mutate(effect = str_remove(effect, "_on_X")) %>%
+                       rename(IV = effect, indIVs_on_X = coef)
+ 
+                     left_join(
+                       sums_and_bounds,
+                       coefs,
+                       by = "IV"
+                     )
+                   }
+                 )
+               ) %>%
+               select(-sim_data)
+ 
+             return(out)
+           }
+         )
+       )
+ 
+     write_rds(bounds_and_ATE, here::here("data/multiple_IV_sims/bounds_and_ATE.Rds"))
+   } else {
+     bounds_and_ATE <- read_rds(here::here("data/multiple_IV_sims/bounds_and_ATE.Rds"))
+   }
+ 
+ 
+   strength_vs_coefs_power <- bounds_and_ATE %>%
+     unnest(subset) %>%
+     select(-data_file, -indIVs_on_X) %>%
+     unnest(sums_and_bounds) %>%
+     filter(scenario == "power") %>%
+     unnest_wider(bounds) %>%
+     mutate(strength = map_dbl(sum_stats, ~.x$thetas[3] - .x$thetas[1]),
+            U_on_XY = paste0("beta[U]==", U_on_XY),
+            p = factor(paste0("p==", p),
+                       levels = paste0("p==", c(10,50)))) %>%
+     ggplot(aes(x = indIVs_on_X, y = strength)) +
+       geom_point() +
+       facet_grid(U_on_XY ~ p,
+                  labeller = label_parsed) +
+       labs(
+         x = bquote(beta[j]),
+         y = "Strength"
+       ) +
+       theme_bw()
+ 
+   ggsave(here::here("figures/strength_vs_coef_multiple_IVs_power.png"),
+          strength_vs_coefs_power,
+          dpi = 300)
+ 
+   strength_vs_coefs_MR <- bounds_and_ATE %>%
+     unnest(subset) %>%
+     select(-data_file, -indIVs_on_X) %>%
+     unnest(sums_and_bounds) %>%
+     unnest_wider(bounds) %>%
+     filter(scenario == "MR") %>%
+     mutate(strength = map_dbl(sum_stats, ~.x$thetas[3] - .x$thetas[1]),
+            U_on_XY = paste0("beta[U]==", U_on_XY),
+            p = factor(paste0("p==", p),
+                       levels = paste0("p==", c(10,50)))) %>%
+     ggplot(aes(x = indIVs_on_X, y = strength)) +
+       geom_point() +
+       facet_grid(U_on_XY ~ p,
+                  labeller = label_parsed) +
+       labs(
+         x = bquote(beta[j]),
+         y = "Strength"
+       ) +
+       theme_bw()
+ 
+   ggsave(here::here("figures/strength_vs_coef_multiple_IVs_MR.png"),
+          strength_vs_coefs_MR,
+          dpi = 300)
+ 
+ 
+   bounds_plot_power <- bounds_and_ATE %>%
+     unnest(subset) %>%
+     select(-data_file, -indIVs_on_X) %>%
+     unnest(sums_and_bounds) %>%
+     unnest_wider(bounds) %>%
+     filter(scenario == "power") %>%
+     mutate(U_on_XY = paste0("beta[U]==", U_on_XY),
+            p = factor(paste0("p==", p),
+                       levels = paste0("p==", c(10,50))),
+            X_on_Y = paste0("gamma[X]==", X_on_Y)) %>%
+     ggplot(aes(x = indIVs_on_X)) +
+       geom_errorbar(aes(ymin = lower, ymax = upper),
+                     width = 0.05) +
+       geom_hline(yintercept = 0) +
+       geom_hline(aes(yintercept = ATE,
+                      color = "ATE")) +
+       labs(
+         x = bquote(beta[j]),
+         y = "ATE",
+         color = ""
+       ) +
+       facet_grid(U_on_XY + X_on_Y ~ p,
+                  labeller = label_parsed) +
+       theme_bw() +
+       theme(legend.position = "top")
+ 
+   ggsave(plot = bounds_plot_power,
+          filename = here::here("figures/bounds_from_multiple_IV_sims_power.png"),
+          dpi = 300)
+ 
+ 
+   bounds_plot_MR <- bounds_and_ATE %>%
+     unnest(subset) %>%
+     select(-data_file, -indIVs_on_X) %>%
+     unnest(sums_and_bounds) %>%
+     unnest_wider(bounds) %>%
+     filter(scenario == "MR") %>%
+     mutate(U_on_XY = paste0("beta[U]==", U_on_XY),
+            p = factor(paste0("p==", p),
+                       levels = paste0("p==", c(10,50))),
+            X_on_Y = paste0("gamma[X]==", X_on_Y)) %>%
+     ggplot(aes(x = indIVs_on_X)) +
+     geom_errorbar(aes(ymin = lower, ymax = upper),
+                   width = 0.005) +
+     geom_hline(yintercept = 0) +
+     geom_hline(aes(yintercept = ATE,
+                    color = "ATE")) +
+     labs(
+       x = bquote(beta[j]),
+       y = "ATE",
+       color = ""
+     ) +
+     facet_grid(U_on_XY + X_on_Y ~ p,
+                labeller = label_parsed) +
+     theme_bw() +
+     theme(legend.position = "top")
+ 
+   ggsave(plot = bounds_plot_MR,
+          filename = here::here("figures/bounds_from_multiple_IV_sims_MR.png"),
+          dpi = 300)
+ 
+ }
Saving 7 x 7 in image
Saving 7 x 7 in image
Saving 7 x 7 in image
Saving 7 x 7 in image
> 
> proc.time()
    user   system  elapsed 
8546.921  574.110 3615.076 
